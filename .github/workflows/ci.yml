name: CI
on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
  release:
    types:
      - published

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GOTESTSUM_VERSION: 1.11.0
  GORELEASER_VERSION: 1.21.1
  GOLANGCI_VERSION: 1.55
  CI: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false # Conflicts with GolangCI, if enabled

      - name: Lint Go Code
        uses: golangci/golangci-lint-action@v4
        with:
          version: v${{ env.GOLANGCI_VERSION }}
          only-new-issues: true

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  test:
    name: Unit Tests
    needs: [lint]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      statuses: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Setup gotestsum
        uses: autero1/action-gotestsum@v2.0.0
        with:
          gotestsum_version: ${{ env.GOTESTSUM_VERSION }}

      - name: Setup Go test reporter
        run: |
          go install github.com/vakenbolt/go-test-report@latest
          go-test-report version

      - name: Run tests
        run: |
          gotestsum --junitfile reports/unit-tests.xml --jsonfile reports/unit-tests-results.json -- -race -covermode=atomic -coverprofile=cover.txt ./internal/... ./cmd/...

      - name: Generate GitHub test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Unit Tests Report
          path: 'reports/unit-tests.xml'
          reporter: java-junit

      - name: Generate HTML test report
        if: success() || failure()
        run: |
          cat reports/unit-tests.json | go-test-report -o unit-tests.html

      - name: Upload test report artifact
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: unit-test-report
          path: unit-tests.html
          retention-days: 7

      - name: Upload code coverage report to Codecov
        if: success() || failure()
        uses: codecov/codecov-action@v3
        with:
          #token: ${{ secrets.CODECOV_TOKEN }}
          files: reports/cover.out

  publish-binaries:
    name: Publish Binaries
    needs: [lint, test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run goreleaser (snapshot)
        uses: goreleaser/goreleaser-action@v5
        if: github.event_name != 'release'
        with:
          version: ${{ env.GORELEASER_VERSION }}
          args: release --snapshot --skip-publish --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run goreleaser (release)
        uses: goreleaser/goreleaser-action@v5
        if: github.event_name == 'release'
        with:
          version: ${{ env.GORELEASER_VERSION }}
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        if: github.event_name != 'release'
        with:
          name: snapshot-artifact
          path: dist/*
          retention-days: 7

  publish-docker:
    name: Publish Docker
    needs: [lint, test]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          labels: |
            maintainer=Bruno Paz <oss@brunopaz.dev>
            org.opencontainers.image.description=Golang CLI Template

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
